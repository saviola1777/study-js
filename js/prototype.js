const obA = {
   name:"sasha" ,
}
//ООП в JavaScript побудовано на прототипному наслідуванні. Об'єкти можна організувати у ланцюжки таким чином, щоб здійснювався 
//автоматичний пошук властивості в іншому об'єкті, не знайденої в одному об'єкті. Сполучною ланкою виступає спеціальна прихована властивість [[Prototype]], 
//яка в консолі браузера відображається як __proto__.

// Метод Object.create(obj) створює і повертає новий об'єкт, зв'язуючи його з об'єктом obA.
//Тобто прототип - це резервне сховище властивостей і методів об'єкта, автоматично використовується під час їх пошуку. Об'єкт, який виступає прототипом, може також мати свій прототип, наступний - свій, і так далі.

// Пошук властивості виконується до першого збігу. Інтерпретатор шукає властивість за ім'ям в об'єкті, якщо не знаходить, то звертається до властивості __proto__, 
// тобто переходить за посиланням до об'єкта-прототипу, а потім - до прототипу прототипу. Якщо інтерпретатор дійде до кінця ланцюжка і не знайде властивості з таким ім'ям,
//  то поверне undefined.

const objectB = Object.create(obA) // Object.create(obA) створюєм обєкт і в середину поміщаємо прототим , тобто в цьому обєкті буде силка на obA ми матимемо в цьому обєкті мати доступ
objectB.id=5;                     // в обєкті додаємо id 

const objectNew = Object.create(objectB) // Object.create(objectB) створюєм обєкт і в середину поміщаємо прототим , тобто в цьому обєкті буде силка на objectB
objectNew.time=18

console.log("objectNew", objectNew );     // тепер в цьому обєкті є доступ до обєкта obA і objectB 
console.log("objectNew.name", objectNew.name);

const Car = function () {
   console.log("sasha");
}
const car = new Car()
console.log("car",car);

// 1.В кожного обєкта є свойство _proto_ 
// В цьому свойстві лежить силка на його прототип ,тобто силка на інший обєкт