// Всередині функцій можна використовувати зарезервоване ключове слово this. Під час виконання функції, в this записується посилання на об'єкт, в контексті якого вона була викликана. Таким чином, в тілі функції ми можемо отримати доступ до властивостей і методів цього об'єкта. Контектс визова залежить від місця де була визвана функція 
// Оскільки ми визвали метод і зліва він силався на обєкт то this силається на обєкт 

const user = {
  name: "Mango",
  showUser() {
    console.log("this", this);
  },
}
user.showUser()


const copyUser = user.showUser

copyUser()  // оскільки вона визвалася вне обєжкта то вона не буде силатися на оєкт буде силка на віндовс


//Передаючи методи об'єкта як колбек-функції, контекст не зберігається. Колбек - це посилання на метод, яке присвоюється як значення параметра, що викликається без об'єкта

const customer = {
  firstName: "Jacob",
  lastName: "Mercer",
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  },
};

function makeMessage(callback) {
  // callback() - це виклик методу getFullName без об'єкта
  console.log(`Обробляємо заявку від ${callback()}.`);
}

makeMessage(customer.getFullName); // Буде помилка у виклику функції

//Контекст всередині стрілки визначається місцем її оголошення, а не виклику, і посилається на контекст батьківської функції.
//Стрілочні функції також ігнорують наявність суворого режиму. Якщо стрілка запам'ятала глобальний контекст, то this в ній буде містити посилання на window, незалежно від того, чи виконується скрипт в суворому режимі.

const showThis = () => {
  console.log("this in showThis: ", this);
};

showThis(); // this in showThis: window

const users = {
  username: "Mango",
};
users.showContext = showThis;  //Тут ми в обєкт user записуємо метод яке має силку на колбек функцію 

users.showContext(); // Тут ми визиваємо метод в контексті обєкта user , але оскільки метод обєкта є колбек функція , він немає this q